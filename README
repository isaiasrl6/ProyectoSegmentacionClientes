# Segmentación de Clientes Bancarios

Este proyecto implementa un sistema completo de segmentación de clientes para una institución bancaria utilizando Python, Machine Learning y visualización interactiva con Streamlit.

El objetivo es ofrecer una solución práctica para identificar grupos de clientes, predecir la fuga (churn) y facilitar la toma de decisiones comerciales con base en datos reales.

## Objetivos del Proyecto

- Agrupar a los clientes según su comportamiento financiero (segmentación).
- Detectar clientes con alto riesgo de fuga (churn prediction).
- Presentar visualmente los hallazgos mediante un dashboard interactivo.

## Estructura del Proyecto

proyecto_segmentacion_cliente/
│
├── data.csv                      # Dataset original cargado por el banco
├── limpieza.py                   # Script que limpia y normaliza los datos
├── rfm.py                        # Cálculo del puntaje RFM
├── clustering.py                 # Segmentación con K-Means
├── churn_model.py                # Modelo predictivo de churn con Random Forest
├── dashboard.py                  # App visual e interactiva hecha con Streamlit
├── data_quality_report.py        # Análisis automatizado de calidad de datos
├── reporte_calidad_completo.csv  # Salida del reporte de calidad
├── clientes_segmentados_rfm.csv  # Exportación final con RFM y segmentos
├── README.md                     # Este archivo

## Limpieza de Datos

Antes de hacer cualquier análisis, se aplican transformaciones para:

- Rellenar o eliminar datos nulos.
- Corregir columnas como `canal_favorito`, `saldo_promedio` y `productos_contratados`.
- Establecer límites razonables en variables como frecuencia de transacción.

Esto se hace automáticamente con el archivo `limpieza.py`.

## Análisis de Calidad de Datos

El archivo `data_quality_report.py` genera un reporte detallado con:

- Porcentaje de nulos por columna
- Duplicados
- Valores fuera de rango según reglas de negocio
- Resumen estadístico por campo

Resultado generado: `reporte_calidad_completo.csv`

Este paso permite asegurar la confiabilidad de los datos antes del análisis.

## Segmentación RFM

Se calcula un RFM Score de 3 dígitos para clasificar a los clientes según:

- R (Recency): Días desde la última transacción
- F (Frequency): Número de transacciones
- M (Monetary): Saldo promedio del cliente

El resultado permite identificar a los clientes más valiosos, frecuentes o inactivos.

## Clustering con K-Means

Se aplica un modelo de agrupamiento automático (K-Means) para detectar patrones no visibles a simple vista. Se utilizan las variables:

- R, F, M
- Ingreso mensual
- Uso de banca digital
- Participación en promociones

Esto agrupa a los clientes en 4 segmentos que luego pueden ser usados para campañas personalizadas.

## Predicción de Fuga (Churn)

Se entrena un modelo para predecir el abandono de clientes. Se considera en riesgo si:

- No transacciona en más de 180 días
- No usa banca digital
- Tiene menos de tres productos contratados

El modelo entrenado (RandomForestClassifier) ofrece métricas como precisión, matriz de confusión y reporte de clasificación.

## Dashboard con Streamlit

Una vez procesados los datos, se despliega un dashboard interactivo que permite:

- Ver KPIs por segmento
- Filtrar por clientes con riesgo de fuga
- Explorar datos con gráficos de Plotly
- Consultar el detalle de cada cliente

Para ejecutar localmente:

streamlit run dashboard.py

## Requisitos Técnicos

Instalar los paquetes necesarios:

pip install -r requirements.txt

O instalar manualmente:

pip install pandas scikit-learn streamlit plotly matplotlib seaborn

## Autor

Isaías Josué Rosario Luciano  
Especialista de datos
República Dominicana
